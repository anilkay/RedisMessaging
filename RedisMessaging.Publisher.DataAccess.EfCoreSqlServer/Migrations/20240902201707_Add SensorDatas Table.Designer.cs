// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RedisMessaging.DataAccess.EfCoreSqlServer;

#nullable disable

namespace RedisMessaging.DataAccess.EfCoreSqlServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240902201707_Add SensorDatas Table")]
    partial class AddSensorDatasTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.7.24405.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RedisMessaging.Data.DBModels.SensorData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BackendWriteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SensorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SensorValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("SensorDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
